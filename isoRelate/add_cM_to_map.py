import csv
import argparse


parser = argparse.ArgumentParser()

parser.add_argument('-map','--map_file', metavar='', help='input map file generated by plink', type =str,nargs=1)
parser.add_argument('-rec','--recombination_map', metavar='', help='input recombination map with physical postions anad cM format: 1,2,3,4 wher 1=snp id , 2= chromosome number, 3 = cM, 4 = bp', type =str,nargs=1)
parser.add_argument('-o','--output', metavar='', help='output stem',type=str,nargs=1)


arguments = parser.parse_args()



## thin recombination map

thin_rec_map=[]

with open(arguments.recombination_map[0], 'r') as csvfile:
	csv_reader = csv.reader(csvfile)
	row_old=""
	CHR_OLD=1
	CM_OLD=0
	count=0
	for row in csv_reader:
		count=count+1
		snpID, CHR, CM, BP = row
		if int(CHR) != int(CHR_OLD):
			thin_rec_map.append(row_old)
			thin_rec_map.append(row)
			CHR_OLD=CHR
			CM_OLD=CM
			row_old=row
			continue
		elif ((int(CHR) == int(CHR_OLD)) and (float(CM) > float(CM_OLD))):
			thin_rec_map.append(row_old)
			thin_rec_map.append(row)
			CHR_OLD=CHR
			CM_OLD=CM
		row_old=row

with open(arguments.recombination_map[0]+'.thinned', 'w') as file:
    for item in thin_rec_map:
        file.write(str(item) + '\n')




## loop through map file
results=[]
count=0
with open(arguments.map_file[0], 'r') as file:
	for line in file:
		count=count+1
		columns = line.strip().split('\t')

		chr= columns[0]
		id= columns[1]
		cm= columns[2]
		bp= columns[3]

#		print (str(chr)+ "   " + str(bp))
		chr_flag=0
# loop through the recombination map
		for row in thin_rec_map:
			snpID, CHR, CM, BP = row
#			print ("ASS   "+ str(CHR)+ "   " + str(CM) + "    " +str(BP))

			if chr_flag==0:
				if int(chr) == int(CHR):
#					print ("dd1")
				#print (str(bp) + " " + str(BP))
					chr_flag=1
					if int(bp) < int(BP):
#						print ("WTW")
						cm=0
						results.append(str(chr)+ "	" + str(id) + "	" +str(cm) + "	" +str(bp))
						CM_OLD=CM
						break
				CM_OLD=CM
				continue

			if chr_flag==1:
				if int(chr) == int(CHR):
					if int(bp) < int(BP):
#						print ("here"+ str(CM_OLD))
						cm=CM_OLD
						results.append(str(chr)+ "	" + str(id) + "	" +str(cm) + "	" +str(bp))
						CM_OLD=CM
						break
						

				if int(chr) != int(CHR):
#					print ("da")
					cm=CM_OLD
					CM_OLD=CM
					results.append(str(chr)+ "	" + str(id) + "	" +str(cm) + "	" +str(bp))
					break
			CM_OLD=CM


		if (int(chr)==11) and (int(bp) >= int(BP)):                                      # this should only include SNPs on chr 11 after the last marker of genetic map
#			print ("oh")
			cm=CM
			results.append(str(chr)+ "      " + str(id) + " " +str(cm) + "  " +str(bp))







with open(arguments.output[0]+'_cM.map', 'w') as file:
    # Write each element on a new line
    for item in results:
        file.write(str(item) + '\n')
